1. 일치연산자(===)
- 일치 연산자 === 좌항과 우항이 '정확', '엄격'하게 같을 때 true, 다르면 false가 리턴된다.
  여기서는 정확하다는 말의 의미에 집중하자.
- javascript, php는 비슷한 것을 같은 것으로 간주하기도 한다.

2. 함수
2-1. 함수의 정의(선언) 방법
    function 함수이름(){
        ..실행할 구문..
    }

- 함수를 정의하기 위해서는 function 이라는 예약어 뒤에 함수의 이름과 괄호()를 사용하여 선언하고,
  그 뒤에 대괄호{..}블록을 생성하여 실행할 구문을 기술한다.

- 함수의 호출
    함수이름();

3. 화살표 함수
- 함수 표현식보다 단순하고 간결한 문법으로 함수를 만들 수 있는 방법이 있다.
- 바로 화살표 함수 이다.

3-1. 매개변수 지정 방법
- () => {...}       //매개변수가 없을 경우
- x => {...}        //매개변수가 한 개인 경우, 소괄호 생략 가능
- (x,y) => {...}    //매개변수가 여러 개인 경우, 소괄호 생략 할 수 없다.

3-2. 함수 몸체 지정 방법
- x => {return x * x;}
- x => x * x            //함수 몸체가 한줄의 구문이라면 중괄호 생략할 수 있으며,
                          암묵적으로  return된다.
- () => {
        var x = 10;
        return x*x;
    }

4. var 변수 선언의 문제점
- 같은 변수를 한번 더 선언했음에도 불구하고, 에러가 나오지 않고 각기 다른 값이 출력되는 것을 볼 수 있다.
- 이는 유연한 변수 선언으로 간단한 테스트에는 편리할 수 있겠지만, 코드량이 많아 진다면 어디에서 어떻게 사용될지도 파악하기 힘들 뿐더러 값이 바뀔 우려가 있다.
- ES6 이후, 이를 보완하기 위해 추가된 변수 선언 방식 let, const가 있다.

4-1. let vs const
- let은 변수에 재할당이 가능하다.
- const는 변수의 재선언, 변수 재할당이 불가능하다.

5. 배열
- 하나의 배열 안에는 같은 종류(데이터 형)의 값들만 저장될 수 있다.
- let myarray = new Array(값1,값2,...);
- let myarray = [값1,값2,...];

    let myarray = ['HTML', 'CSS', 'JS'];

5-1. 데이터의 접근
- 배열이름[일련번호] 형식으로 접근할 수 있다.

5-2. 빈배열
- 아무런 값이 저장되어 있지 않은 형태로 만든 후 하나씩 값을 채워 나가는 것도 가능하다.

    let myarray = new Array();
    let myarray = [];

- 0번째 칸부터 차례대로 값을 대입해 주어야만 사용할 수 있다.

    myarray[0]="HTML";
    myarray[1]="CSS";


6. 2차 배열 
6-1. 2차 배열 생성
- 방법1

    let myarray = new Array(
        new Array(값1, 값2, ...),
        new Array(값1, 값2, ...),
        ..
    );
    
- 방법2

    let myarray = [
        [값1, 값2, ...],
        [값1, 값2, ...],
        ...
    ];

6-2. 2차배열 모양
let myarray = [
    ["웹표준","HTML5/CSS3", "반응형 웹"],
    ["javascript","jQuery", "Ajax"],
];

6-3. 크기 조회하기
- 행의 크기 조회
    배열객체이름.length;

- 열의 크기를 조회
    배열객체이름[n].length;

6-4. Array 와 String 의 관계
- String클래스의 split()함수는 파라미터로 전달된 문자열을 구분자로 삼아 문자열을 잘라내고, 그 결과를 배열로 변환하여 리턴한다.